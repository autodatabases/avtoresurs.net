# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-11-15 09:21
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tecdoc', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.AutoField(db_column='MOD_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('production_start', models.IntegerField(db_column='MOD_PCON_START', verbose_name='Начало производства')),
                ('production_end', models.IntegerField(db_column='MOD_PCON_END', verbose_name='Конец производства')),
                ('for_car', models.SmallIntegerField(blank=True, choices=[('0', 'Нет'), ('1', 'Да')], db_column='MOD_PC', null=True, verbose_name='Для легковых')),
                ('for_truck', models.SmallIntegerField(blank=True, choices=[('0', 'Нет'), ('1', 'Да')], db_column='MOD_CV', null=True, verbose_name='Для грузовых')),
            ],
            options={
                'db_table': 'models',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CarSection',
            fields=[
                ('id', models.AutoField(db_column='STR_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('type', models.IntegerField(db_column='STR_TYPE', verbose_name='Тип')),
                ('level', models.IntegerField(db_column='STR_LEVEL', verbose_name='Уровень дерева')),
            ],
            options={
                'db_table': 'search_tree',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CarType',
            fields=[
                ('id', models.AutoField(db_column='TYP_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('sorting', models.IntegerField(db_column='TYP_SORT', verbose_name='Порядок')),
                ('production_start', models.IntegerField(db_column='TYP_PCON_START', verbose_name='Начало производства')),
                ('production_end', models.IntegerField(db_column='TYP_PCON_END', verbose_name='Конец производства')),
                ('eng_volume', models.IntegerField(blank=True, db_column='TYP_CCM', null=True, verbose_name='Объём двигателя (куб.см)')),
                ('cylinders', models.IntegerField(blank=True, db_column='TYP_CYLINDERS', null=True, verbose_name='Количество цилиндров')),
                ('power_kw_from', models.IntegerField(blank=True, db_column='TYP_KW_FROM', null=True, verbose_name='Мощность двигателя (кВт): ОТ')),
                ('power_kw_upto', models.IntegerField(blank=True, db_column='TYP_KW_UPTO', null=True, verbose_name='Мощность двигателя (кВт): До')),
                ('power_hp_from', models.IntegerField(blank=True, db_column='TYP_HP_FROM', null=True, verbose_name='Мощность двигателя (л.с.): ОТ')),
                ('power_hp_upto', models.IntegerField(blank=True, db_column='TYP_HP_UPTO', null=True, verbose_name='Мощность двигателя (л.с.): До')),
            ],
            options={
                'ordering': ['sorting', 'production_start'],
                'db_table': 'types',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountryProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'art_country_specifics',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.AutoField(db_column='CRI_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('type', models.CharField(db_column='CRI_TYPE', max_length=1, verbose_name='Тип')),
                ('is_interval', models.BooleanField(db_column='CRI_IS_INTERVAL', verbose_name='Интервальный')),
            ],
            options={
                'db_table': 'criteria',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Engine',
            fields=[
                ('id', models.AutoField(db_column='ENG_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('code', models.CharField(db_column='ENG_CODE', max_length=180, verbose_name='Код')),
                ('production_start', models.IntegerField(db_column='ENG_PCON_START', verbose_name='Начало производства')),
                ('production_end', models.IntegerField(db_column='ENG_PCON_END', verbose_name='Конец производства')),
                ('power_kw_from', models.IntegerField(blank=True, db_column='ENG_KW_FROM', null=True, verbose_name='Мощность двигателя (кВт): ОТ')),
                ('power_kw_upto', models.IntegerField(blank=True, db_column='ENG_KW_UPTO', null=True, verbose_name='Мощность двигателя (кВт): До')),
                ('power_hp_from', models.IntegerField(blank=True, db_column='ENG_HP_FROM', null=True, verbose_name='Мощность двигателя (л.с.): ОТ')),
                ('power_hp_upto', models.IntegerField(blank=True, db_column='ENG_HP_UPTO', null=True, verbose_name='Мощность двигателя (л.с.): До')),
            ],
            options={
                'db_table': 'engines',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(db_column='GRA_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('db_number', models.IntegerField(db_column='GRA_TAB_NR', verbose_name='Номер диска')),
                ('filename', models.IntegerField(db_column='GRA_GRD_ID', verbose_name='Имя файла')),
                ('lang', models.IntegerField(db_column='GRA_LNG_ID', verbose_name='Язык')),
            ],
            options={
                'db_table': 'graphics',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.AutoField(db_column='DOC_TYPE', primary_key=True, serialize=False, verbose_name='Ид')),
                ('ext', models.CharField(db_column='DOC_EXTENSION', max_length=9)),
            ],
            options={
                'db_table': 'doc_types',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(db_column='GA_ID', primary_key=True, serialize=False, verbose_name='Ид')),
            ],
            options={
                'db_table': 'generic_articles',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(db_column='ART_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('sku', models.CharField(db_column='ART_ARTICLE_NR', max_length=66, verbose_name='Название')),
            ],
            options={
                'db_table': 'articles',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'article_info',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartGroup',
            fields=[
                ('id', models.AutoField(db_column='LA_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('sorting', models.IntegerField(db_column='LA_SORT', verbose_name='Порядок')),
            ],
            options={
                'db_table': 'link_art',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'link_gra_art',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(db_column='ALI_QUANTITY', verbose_name='Количество')),
                ('sorting', models.IntegerField(db_column='ALI_SORT', verbose_name='Порядок')),
            ],
            options={
                'db_table': 'article_lists',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartListCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'article_list_criteria',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartPdf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'link_gra_art',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SearchTree',
            fields=[
                ('id', models.IntegerField(db_column='STR_ID', primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField(blank=True, db_column='STR_ID_PARENT', null=True, verbose_name='self')),
                ('str_type', models.SmallIntegerField(blank=True, db_column='STR_TYPE', null=True)),
                ('level', models.SmallIntegerField(blank=True, db_column='STR_LEVEL', null=True)),
                ('str_sort', models.SmallIntegerField(blank=True, db_column='STR_SORT', null=True)),
                ('str_node_nr', models.IntegerField(blank=True, db_column='STR_NODE_NR', null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'search_tree',
            },
        ),
        migrations.CreateModel(
            name='SectionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'link_ga_str',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(db_column='SUP_ID', primary_key=True, serialize=False, verbose_name='Ид')),
                ('title', models.CharField(blank=True, db_column='SUP_BRAND', max_length=60, null=True, verbose_name='Название')),
            ],
            options={
                'db_table': 'suppliers',
                'verbose_name': 'Производитель запчастей',
                'managed': False,
                'abstract': False,
                'verbose_name_plural': 'Производители запчастей',
            },
        ),
        migrations.CreateModel(
            name='SupplierLogo',
            fields=[
                ('id', models.AutoField(db_column='SLO_ID', primary_key=True, serialize=False, verbose_name='Ид')),
            ],
            options={
                'db_table': 'supplier_logos',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartGroupSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(db_column='LAG_GA_ID', on_delete=django.db.models.deletion.CASCADE, to='tecdoc.Group', verbose_name='Группа запчастей')),
            ],
            options={
                'db_table': 'link_art_ga',
            },
        ),
        migrations.CreateModel(
            name='CarTypeEngine',
            fields=[
                ('car_type', models.ForeignKey(db_column='LTE_TYP_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tecdoc.CarType', verbose_name='Модификация модели')),
                ('production_start', models.IntegerField(db_column='LTE_PCON_START', verbose_name='Начало производства')),
                ('production_end', models.IntegerField(db_column='LTE_PCON_END', verbose_name='Конец производства')),
            ],
            options={
                'db_table': 'link_typ_eng',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
            ],
            options={
                'managed': False,
                'abstract': False,
                'proxy': True,
            },
            bases=('tecdoc.file',),
        ),
        migrations.CreateModel(
            name='PartAnalog',
            fields=[
                ('part', models.ForeignKey(db_column='ARL_ART_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='analogs', serialize=False, to='tecdoc.Part', verbose_name='Запчасть')),
                ('number', models.CharField(db_column='ARL_DISPLAY_NR', max_length=105, verbose_name='Номер')),
                ('search_number', models.CharField(db_column='ARL_SEARCH_NUMBER', max_length=105, verbose_name='Номер для поиска')),
                ('kind', models.IntegerField(choices=[(1, 'не оригинал'), (2, 'торговый'), (3, 'оригинал'), (4, 'номер замен'), (5, 'штрих-код')], db_column='ARL_KIND', verbose_name='Тип')),
                ('sorting', models.IntegerField(db_column='ARL_SORT', verbose_name='Порядок')),
            ],
            options={
                'db_table': 'art_lookup',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartCriteria',
            fields=[
                ('part', models.ForeignKey(db_column='ACR_ART_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='criteria_values', serialize=False, to='tecdoc.Part', verbose_name='Запчасть')),
                ('value', models.CharField(db_column='ACR_VALUE', max_length=60, verbose_name='Значение')),
                ('sorting', models.IntegerField(db_column='ACR_SORT', verbose_name='Порядок')),
                ('display', models.BooleanField(db_column='ACR_DISPLAY', verbose_name='Показывать')),
            ],
            options={
                'ordering': ['sorting'],
                'db_table': 'article_criteria',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartTypeGroupSupplier',
            fields=[
                ('car_type', models.ForeignKey(db_column='LAT_TYP_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tecdoc.CarType', verbose_name='Модификация модели')),
                ('sorting', models.IntegerField(db_column='LAT_SORT', verbose_name='Порядок')),
            ],
            options={
                'db_table': 'link_la_typ',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PdfFile',
            fields=[
            ],
            options={
                'managed': False,
                'abstract': False,
                'proxy': True,
            },
            bases=('tecdoc.file',),
        ),
        migrations.CreateModel(
            name='SupplierAddress',
            fields=[
                ('supplier', models.ForeignKey(db_column='SAD_SUP_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='addresses', serialize=False, to='tecdoc.Supplier', verbose_name='Поставщик')),
                ('type', models.IntegerField(db_column='SAD_TYPE_OF_ADDRESS', verbose_name='Тип')),
                ('country_flag', models.IntegerField(db_column='SAD_COU_ID', verbose_name='Страна')),
            ],
            options={
                'db_table': 'supplier_addresses',
                'managed': False,
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='partgroupsupplier',
            name='part',
            field=models.ForeignKey(db_column='LAG_ART_ID', on_delete=django.db.models.deletion.CASCADE, to='tecdoc.Part', verbose_name='Запчасть'),
        ),
        migrations.AddField(
            model_name='partgroupsupplier',
            name='supplier',
            field=models.ForeignKey(db_column='LAG_SUP_ID', on_delete=django.db.models.deletion.CASCADE, to='tecdoc.Supplier', verbose_name='Поставщик'),
        ),
    ]
